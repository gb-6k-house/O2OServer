#!/usr/bin/env node

/**
 * Module dependencies.
 */
var logger =new require('../../public/utils/logger').init( __dirname +"/../configes/log4js.json");
process.logger = logger;
var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var confige = require('../configes/confige');
//var rpcServer = require('./rpc-protocol');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || confige.port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */



function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//我们可以uncaughtException来全局捕获未捕获的Error，同时你还可以将此函数的调用栈打印出来，捕获之后可以有效防止node进程退出
//我们也可以用node-forever 提供了守护的功能和LOG日志记录功能。
process.on('uncaughtException', function (err) {
  //打印出错误
  //console.log(err);
  //打印出错误的调用栈方便调试
  logger.error(JSON.stringify(err.stack));
});
module.exports = app;
