#运行用户
user nginx;
#启动进程
worker_processes auto;
#工作模式以及全局链接上线
events {
    use epoll;
    worker_connections 1024;
}
#设置http ,利用它的反向代理功能提供负载均衡支持
http{
#设定mime类型
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log    /var/log/nginx/access.log;
 #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
        sendfile        on;
 #tcp_nopush     on;

 #连接超时时间
 #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;

 #开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

 #设定请求缓冲
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;
    include /etc/nginx/conf.d/*.conf;include /etc/nginx/sites-enabled/*;

 #设定负载均衡的服务器列表
 upstream  api {
 #weigth参数表示权值，权值越高被分配到的几率越大
 #本机上的Squid开启3128端口
 server 127.0.0.1:3000 weight=1;
 }
 upstream  web_server {
 #weigth参数表示权值，权值越高被分配到的几率越大
 #本机上的Squid开启3128端口
 server 127.0.0.1:8080 weight=1;
 }

 server {
 #侦听80端口
 listen       80;
 #定义使用www.xx.com访问
 server_name  www.o2o.com;

 #设定本虚拟主机的访问日志
 access_log  logs/www.o2o.com.access.log  main;

 #默认请求
 location / {
 proxy_pass http://web_server;
 index index.php index.html index.htm;   #定义首页索引文件的名称
 }


 location /api {
 proxy_pass http://api;
 }

 # 定义错误提示页面
 error_page   500 502 503 504 /50x.html;
 location = /50x.html {
 root   /root;
 }

 #设定查看Nginx状态的地址
 location /NginxStatus {
 stub_status            on;
 access_log              on;
 auth_basic              "NginxStatus";
 auth_basic_user_file  conf/htpasswd;
 }
 #禁止访问 .htxxx 文件
 location ~ /\.ht {
 deny all;
 }
 }
 }